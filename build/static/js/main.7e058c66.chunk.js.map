{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/header.js","components/layout/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","background","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","Header","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","React","App","filter","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAIMA,E,2MACJC,SAAW,WACT,MAAO,CACLC,gBAAiB,UACjBC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,S,wEAKvD,IAAD,EACeC,KAAKH,MAAMC,KAAzBG,EADD,EACCA,GAAIC,EADL,EACKA,MACZ,OACE,yBAAKC,MAAOH,KAAKR,YACf,2BACE,2BAAOY,KAAK,WAAWC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAMC,KADtE,IAC+E,IAC5EC,EACD,4BAAQC,MAAQK,EAAUC,QAAST,KAAKH,MAAMa,QAAQH,KAAKP,KAAMC,IAAjE,W,GAlBaU,aA6BjBH,EAAW,CACfI,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRpB,QAAS,UACTqB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGM1B,IC1BA2B,E,iLAXH,IAAD,OACP,OAAOlB,KAAKH,MAAMsB,MAAMC,KAAI,SAACtB,GAAD,OAC1B,kBAAC,EAAD,CAAUuB,IAAMvB,EAAKG,GAAIH,KAAQA,EAAMQ,aAAgB,EAAKT,MAAMS,aAAcI,QAAU,EAAKb,MAAMa,iB,GAJvFC,aCMpB,IAAMW,EAAc,CAClBV,WAAY,OACZC,MAAO,OACPU,UAAW,SACX7B,QAAS,QAEI8B,EAdf,WACE,OACE,4BAAQrB,MAASmB,GACf,0C,OCgCSG,E,2MAlCbC,MAAQ,CACNxB,MAAO,I,EAGTyB,SAAW,SAACC,GACVA,EAAEC,iBACF,EAAKhC,MAAMiC,QAAQ,EAAKJ,MAAMxB,Q,EAGhCG,SAAW,SAACuB,GAAD,OAAO,EAAKG,SAAL,eAAgBH,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,S,wEAGzD,OACE,0BAAMP,SAAW3B,KAAK2B,SAAUxB,MAAO,CAACgC,QAAU,SAChD,2BACE/B,KAAK,OACL6B,KAAK,QACL9B,MAAS,CAACiC,KAAK,KAAM1C,QAAS,OAC9B2C,YAAY,eACZH,MAAOlC,KAAK0B,MAAMxB,MAClBG,SAAWL,KAAKK,WAElB,2BACED,KAAM,SACN8B,MAAM,SACNI,UAAU,MACVnC,MAAO,CAACiC,KAAK,Y,GA3BDG,IAAM5B,WCyDb6B,E,2MArDbd,MAAQ,CACNP,MAAO,CACL,CACElB,GAAG,EACHC,MAAO,oBACPH,WAAW,GAEb,CACEE,GAAG,EACHC,MAAO,gBACPH,WAAW,GAEb,CACEE,GAAG,EACHC,MAAO,sBACPH,WAAW,K,EAMjBO,aAAe,SAACL,GACd,EAAK8B,SAAS,CAAEZ,MAAM,EAAKO,MAAMP,MAAMC,KAAK,SAAAtB,GAI1C,OAHGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAKXY,QAAU,SAACT,GACT,EAAK8B,SAAS,CAAEZ,MAAM,YAAK,EAAKO,MAAMP,MAAMsB,QAAO,SAAA3C,GAAI,OAAIA,EAAKG,KAAMA,S,EAIxEwB,QAAS,SAACvB,GACRwC,QAAQC,IAAIzC,I,wEAIZ,OACE,6BACE,yBAAKoC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASR,QAAW9B,KAAKyB,UACzB,kBAAC,EAAD,CAAON,MAAOnB,KAAK0B,MAAMP,MAAOb,aAAgBN,KAAKM,aAAcI,QAAWV,KAAKU,gB,GA/C3EC,aCOEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7e058c66.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      backgroundColor: '#f4f4f4',\r\n      padding: '10px',\r\n      borderBottom: '1px #ccc dotted',\r\n      textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}        \r\n          {title}\r\n          <button style= {btnStyle} onClick={this.props.delTodo.bind(this, id)}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 8px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem key= {todo.id} todo = {todo} markComplete = {this.props.markComplete} delTodo= {this.props.delTodo} />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos\r\n\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n  return(\r\n    <header style = {headerStyle}>\r\n      <h1>TodoList</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nclass AddTodo extends React.Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title)\r\n  }\r\n\r\n  onChange = (e) => this.setState({[e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit= {this.onSubmit} style={{display : 'flex'}}>\r\n        <input\r\n          type=\"text\" \r\n          name=\"title\" \r\n          style = {{flex:'10', padding: '5px'}}\r\n          placeholder=\"add Todo....\"  \r\n          value={this.state.title}\r\n          onChange ={this.onChange}\r\n        />\r\n        <input \r\n          type= \"submit\" \r\n          value=\"submit\" \r\n          className=\"btn\" \r\n          style={{flex:'1'}} \r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from 'react'\nimport Todos from './components/Todos';\nimport Header from './components/layout/header';\nimport AddTodo from './components/layout/AddTodo';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id:1,\n        title: \"Take out the dirt\",\n        completed: false,\n      },\n      {\n        id:2,\n        title: \"Take out kids\",\n        completed: false,\n      },\n      {\n        id:3,\n        title: \"Meeting with client\",\n        completed: false,\n      },\n    ]\n  }\n\n  //toggle complete\n  markComplete = (id) => {\n    this.setState({ todos:this.state.todos.map (todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) })\n  }\n\n  //Delete Todo\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !==id)] })\n  }\n\n  // Add Todo\n  AddTodo= (title) =>{\n    console.log(title);\n  } \n\n  render() {\n    return (\n      <div>\n        <div className='container'>\n          <Header />\n          <AddTodo addTodo = {this.AddTodo} />\n          <Todos todos={this.state.todos} markComplete = {this.markComplete} delTodo = {this.delTodo} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}